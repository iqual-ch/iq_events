<?php

/**
 * @file
 * The Events module .module file.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_entity_view().
 */
function iq_events_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'iq_event') {
    if (!empty($build['field_iq_event_instances']) && !empty($build['field_iq_event_instances']['#items'])) {
      foreach ($build['field_iq_event_instances']['#items'] as $key => $instance) {
        $instance = Node::load($instance->getValue()['target_id']);
        if (!empty($instance) && $instance->hasField('field_iq_capacity') && $instance->hasField('field_iq_number_registrations')) {

          if ($instance->field_iq_capacity->value == $instance->field_iq_number_registrations->value) {
            $build['field_iq_event_instances'][$key] = [
              '#type' => 'markup',
              '#markup' => '<p>The Registration is closed for ' . $instance->label() . ' (the event is full).</p>',
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function iq_events_webform_submission_delete(WebformSubmissionInterface $webform_submission) {
  $values = $webform_submission->getData();
  if (!empty($values['iq_event_instance'])) {
    // @todo See how many people are registered with the webform.
    $nr_persons = 1;
    $event_instance = Node::load($values['iq_event_instance']);
    if (!empty($values['iq_nr_persons'])) {
      $nr_persons += $values['iq_nr_persons'];
    }

    if (!empty($event_instance)) {
      $number_of_registrations = $event_instance->field_iq_number_registrations->value;
      $occupied_places = $number_of_registrations - $nr_persons;
      if ($occupied_places < 0) {
        $occupied_places = 0;
      }
      $event_instance->set('field_iq_number_registrations', $occupied_places);
      $event_instance->save();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function iq_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_iq_event_edit_form' && !empty($form['field_iq_event_instances'])) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $form['field_iq_event_instances']['widget']['create_series'] =
      [
        '#type' => 'link',
        '#title' => t('Create series'),
        '#url' => Url::fromRoute('iq_events.series', ['node' => $node->id()]),
        '#attributes' => [
          'class' => ['use-ajax'],
          'data-dialog-type' => 'modal',
          'data-dialog-options' => Json::encode([
            'width' => 500,
            'title' => t('Create series'),
          ]),
        ],

      ];
  }
}

/**
 * Returns an IEF widget nearest to the triggering element.
 */
function iq_events_create_series_form($form, FormStateInterface $form_state) {

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_events_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // For the registrations block, only filter with the instances from the event
  // that is being edited.
  if ($form['#id'] == 'views-exposed-form-iq-registrations-block-1') {
    // Get the current node that is being edited from the URL.
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path = explode('/', $current_path);
    $registrations_path = explode('?', end($current_path));
    // Double check for the current path to confirm that we are on the
    // registrations page.
    if (reset($registrations_path) == 'registrations') {
      end($current_path);
      $node_id = prev($current_path);
      $node = Node::load($node_id);
    }
    if (!empty($node) && $node->hasField('field_iq_event_instances')) {
      $event_instances = $node->field_iq_event_instances->getValue();

      $options = [];
      $options['All'] = $form['webform_submission_value']['#options']['All'];
      foreach ($event_instances as $event_instance_id) {
        $event_instance = Node::load($event_instance_id['target_id']);
        if (!empty($event_instance)) {
          $options[$event_instance->id()] = $event_instance->label();
        }
      }
      $form['webform_submission_value']['#options'] = $options;
    }
  }
}

/**
 * Implements hook_webform_element_alter().
 */
function iq_events_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  $form = $context['form'];
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'iq_event') {
    if ($element['#webform_key'] == "iq_event_instance") {
      if (!empty($form['#attributes']['class'])) {
        foreach ($form['#attributes']['class'] as $class) {
          if (preg_match('/^.*node\-[0-9]+\-form$/', (string) $class)) {
            $event_instance_id = explode('-', explode('-node-', (string) $class)[1])[0];
            $event_instances = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
              'type' => 'iq_event_instance',
              'nid' => $event_instance_id,
            ]);
            $event_instance = reset($event_instances);
            if (!empty($event_instance)) {
              $element['#default_value'] = $event_instance->id();
            }
          }
        }
      }
    }
    elseif ($element['#webform_key'] == "iq_event") {
      $element['#default_value'] = $node->id();
    }
  }
}
