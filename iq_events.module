<?php

use Drupal\Core\Access\AccessResult;
use Drupal\node\Entity\Node;
use Drupal\group\Entity\Group;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_view().
 */
function iq_events_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'iq_event') {
    foreach ($build['field_iq_event_instances']['#items'] as $key => $instance) {
      $instance = Node::load($instance->getValue()['target_id']);
      if (!empty($instance) && $instance->hasField('field_iq_capacity') && $instance->hasField('field_iq_number_registrations')) {

        if ($instance->field_iq_capacity->value == $instance->field_iq_number_registrations->value) {
          $build['field_iq_event_instances'][$key] = [
            '#type' => 'markup',
            '#markup' => '<p>The Registration is closed for ' . $instance->label(). ' (the event is full).</p>'
          ];
        }
      }
    }
  }

}

function iq_events_webform_submission_delete(\Drupal\webform\WebformSubmissionInterface $webform_submission) {
  $values = $webform_submission->getData();
  if (!empty($values['iq_event_instance'])) {
    // @TODO: See how many people are registered with the webform.
    $nr_persons = 1;
    $event_instance = Node::load($values['iq_event_instance']);
    if (!empty($values['iq_nr_persons'])) {
      $nr_persons += $values['iq_nr_persons'];
    }

    if (!empty($event_instance)) {
      $number_of_registrations = $event_instance->field_iq_number_registrations->value;
      $occupied_places = $number_of_registrations - $nr_persons;
      if ($occupied_places < 0) {
        $occupied_places = 0;
      }
      $event_instance->set('field_iq_number_registrations', $occupied_places);
      $event_instance->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_events_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  // For the registrations block, only filter with the instances from the event
  // that is being edited.
  if ($form['#id'] == 'views-exposed-form-iq-registrations-block-1') {
    // Get the current node that is being edited from the URL.
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path = explode('/', $current_path);
    $registrations_path = explode('?', end($current_path));
    // Double check for the current path to confirm that we are on the
    // registrations page.
    if (reset($registrations_path) == 'registrations') {
      end($current_path);
      $node_id = prev($current_path);
      $node = Node::load($node_id);
    }
    if (!empty($node) && $node->hasField('field_iq_event_instances')) {
      $event_instances = $node->field_iq_event_instances->getValue();

      $options = [];
      $options['All'] = $form['webform_submission_value']['#options']['All'];
      foreach ($event_instances as $key => $event_instance_id) {
        $event_instance = Node::load($event_instance_id['target_id']);
        if (!empty($event_instance)) {
          $options[$event_instance->id()] = $event_instance->label();
        }
      }
      $form['webform_submission_value']['#options'] = $options;
    }
  }
}

/**
 * Implements hook_webform_element_alter().
 */
function iq_events_webform_element_alter(array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context)
{
  $form = $context['form'];
  \Drupal::logger('iq_events')->notice(json_encode(array_keys($element)));
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'iq_event') {
    if ($element['#webform_key'] == "iq_event_instance") {
      if (!empty($form['#attributes']['class'])) {
        foreach ($form['#attributes']['class'] as $class) {
          if (preg_match('/^.*node\-[0-9]+\-form$/', $class)) {
            $event_instance_id = explode('-', explode('-node-', $class)[1])[0];
            $event_instances = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
              'type' => 'iq_event_instance',
              'nid' => $event_instance_id
            ]);
            $event_instance = reset($event_instances);
            if (!empty($event_instance)) {
              $element['#default_value'] = $event_instance->id();
            }
          }
        }
      }
    }
    else if ($element['#webform_key'] == "iq_event") {
        $element['#default_value'] = $node->id();
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_access().
 */
function iq_events_node_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account)
{
  if ($entity->bundle() == 'iq_event') {
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $generalGroup = Group::load(\Drupal::config('iq_group.settings')->get('general_group_id'));

    if (!empty($generalGroup) && $generalGroup->getMember($account)) {
      return AccessResult::neutral();
    }
    else {
      return AccessResult::forbidden('Non-group members cannot access');
    }
  }
}
